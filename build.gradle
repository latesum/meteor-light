apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'meteor-light'
    version = '0.0.1-SNAPSHOT'
}

// Java compatibility.
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    ext {
        // Global version variable.
        kotlinVersion = '1.1.1'
        springBootVersion = '1.5.2.RELEASE'
        grpcVersion = '1.1.2'
    }
    repositories {
        maven {
            url "http://mvn.pat-edu.org:8080/artifactory/mavencentral/"
        }
        maven {
            url "http://mvn.pat-edu.org:8080/artifactory/jcenter/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

repositories {
    maven {
        url "http://mvn.pat-edu.org:8080/artifactory/mavencentral/"
    }
    maven {
        url "http://mvn.pat-edu.org:8080/artifactory/jcenter/"
    }
    maven {
        url "http://mvn.pat-edu.org:8080/artifactory/pat/"
    }
}

// Add Kotlin and protobuf generated codes into source sets.
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
    main.java.srcDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
}

dependencies {
    // gRPC
    compile "io.grpc:grpc-all:$grpcVersion"
    // Spring
    compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-amqp:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-redis:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-cache:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    // Hibernate ORM
    compile 'org.hibernate:hibernate-core:5.2.8.Final'
    // gRPC x Spring
    compile 'org.lognet:grpc-spring-boot-starter:2.0.0'
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    // commons-io
    compile 'commons-io:commons-io:2.5'
    // Protocol Buffer
    compile 'com.google.protobuf:protobuf-java:3.2.0'
    // MySQL
    runtime 'mysql:mysql-connector-java:6.0.5'

}

// Compile protos before kotlin.
// For compiling protos manually, run `gradlew :generateProto`.
compileKotlin {
    dependsOn(':generateProto')
}

allOpen {
    annotation('javax.persistence.Entity')
    annotation('org.springframework.boot.test.context.SpringBootTest')
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    plugins {
        // an artifact spec for a protoc plugin, with "grpc" as the identifier, which can
        // be referred to in the "plugins" container of the "generateProtoTasks" closure.
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    // https://github.com/google/protobuf/issues/2054
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        all().each { task ->
            task.doLast {
                ant.replaceregexp(
                        match: '@java.lang.Deprecated|@deprecated',
                        replace: '',
                        flags: 'g',
                        byline: true
                ) {
                    fileset(dir: "${protobuf.generatedFilesBaseDir}/main/java")
                }
            }
        }
    }
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
    }
}
